<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Squad Module Table</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
  <style>
     body {
         font-family: 'Roboto', sans-serif;
         margin: 0;
         padding: 0;
         background-color: #f4f6f9;
         color: #333;
       }

       .container {
         display: flex;
         padding: 20px;
         gap: 20px;
       }

       .left-side {
         flex: 1;
         background-color: #fff;
         padding: 20px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         border-radius: 8px;
       }

       #slaClock {
         font-weight: bold;
         font-size: 1.2rem;
         margin-bottom: 30px;
         text-align: center;
         padding: 10px;
         background-color: #f0f0f0;
         border-radius: 5px;
       }

       #chatSupport {
         margin-bottom: 20px;
       }

       #chatHeader {
         font-size: 1.1rem;
         font-weight: 500;
         margin-bottom: 10px;
         color: #444;
       }

       #chatBody {
         height: 200px;
         padding: 10px;
         background-color: #f9f9f9;
         border: 1px solid #ddd;
         border-radius: 5px;
         margin-bottom: 10px;
         overflow-y: auto;
       }

       #chatInputArea {
         display: flex;
         gap: 10px;
       }

       input[type="text"] {
         flex: 1;
         padding: 10px;
         border: 1px solid #ccc;
         border-radius: 5px;
         font-size: 1rem;
       }

       button {
         padding: 10px 20px;
         background-color: #007bff;
         color: white;
         border: none;
         border-radius: 5px;
         cursor: pointer;
         font-size: 1rem;
         transition: background-color 0.3s ease;
       }

       button:hover {
         background-color: #0056b3;
       }

       table {
         flex: 2;
         width: 100%;
         border-collapse: collapse;
         background-color: #fff;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         border-radius: 8px;
         overflow: hidden;
       }

       th, td {
         padding: 12px 15px;
         text-align: left;
         border-bottom: 1px solid #ddd;
       }

       th {
         background-color: #007bff;
         color: white;
         font-weight: bold;
       }

       tbody tr:hover {
         background-color: #f1f1f1;
       }

       #logs {
         margin-top: 20px;
         padding: 20px;
         background-color: #000;
         color: #0f0;
         font-family: "Courier New", Courier, monospace;
         border: 1px solid #444;
         border-radius: 5px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         text-align: left;
         font-size: 0.9rem;
         overflow-y: auto;
         max-height: 300px;
       }

       #logs .log-line {
         padding: 2px 0;
       }

       #logs .prompt {
         color: #00ff00;
       }

       .status-info {
         margin-top: 20px;
         padding: 10px;
         background-color: #fff;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         border-radius: 8px;
         text-align: center;
         display: flex;
         justify-content: space-around;
         gap: 20px;
       }

       .status-item {
         font-size: 1.1rem;
         font-weight: bold;
       }

       @media screen and (max-width: 768px) {
         .container {
           flex-direction: column;
         }

         table {
           font-size: 0.9rem;
         }

         button {
           font-size: 0.9rem;
         }

         .status-info {
           flex-direction: column;
           gap: 10px;
         }
       }
  </style>
</head>
<body>

<div class="container">
  <table id="squadTable">
       <thead>
       <tr>
         <th>Número da Squad</th>
         <th>Status</th>
         <th>Squad (da Issue)</th>
         <th>Módulo (da Issue)</th>
         <th>Detalhe da Entrega</th>
         <th>Ações</th>
       </tr>
       </thead>
       <tbody></tbody>
  </table>

  <div class="left-side">
    <div id="slaClock">Tempo restante para o término: 24:00:00</div>

    <div id="chatSupport">
      <div id="chatHeader">Assistente Virtual - Dúvidas e Postmortem</div>
      <div id="chatBody"></div>
      <div id="chatInputArea">
        <input type="text" id="chatInput" placeholder="Digite sua mensagem..." />
        <button id="sendButton">Enviar</button>
      </div>
    </div>

    <div id="logs">
      <div class="log-line"><span class="prompt">[user@system]:~$</span> Log inicial do sistema...</div>
    </div>
  </div>
</div>

<div class="status-info">
  <!-- ... (mantenha as informações de status existentes) ... -->
</div>

<script>
const TOKEN = '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';
const OWNER = 'cledsonAlves';
const REPO = 'releases';
const LABEL = '[Android]-R100';
const ISSUE_NUMBER = 6;
const tableBody = document.querySelector('#squadTable tbody');

function log(message) {
    const logElement = document.getElementById('logs');
    logElement.innerHTML += `<div class="log-line"><span class="prompt">[user@system]:~$</span> ${message}</div>`;
    logElement.scrollTop = logElement.scrollHeight;
    console.log(message);
}

async function fetchIssuesWithLabel() {
    log('Buscando issues com a label [Android]-R100...');
    const response = await fetch(`https://api.github.com/repos/${OWNER}/${REPO}/issues?labels=${LABEL}&state=all`, {
        headers: { 'Authorization': `Bearer ${TOKEN}` }
    });
    const issues = await response.json();
    log(`${issues.length} issues encontradas.`);
    return issues;
}

async function populateTable() {
    log('Populando tabela com as issues...');
    const issues = await fetchIssuesWithLabel();
    issues.forEach(issue => {
        const tr = document.createElement('tr');
        const squadMatch = issue.body.match(/- Squad\s*:\s*(.+)/);
        const moduleMatch = issue.body.match(/- Nome do módulo\s*:\s*(.+)/);
        const detalheEntregaMatch = issue.body.match(/## Detalhe da entrega\s*([\s\S]*?)\n##/);

        const squad = squadMatch ? squadMatch[1].trim() : 'Não especificado';
        const modulo = moduleMatch ? moduleMatch[1].trim() : 'Não especificado';
        const detalheEntrega = detalheEntregaMatch ? detalheEntregaMatch[1].trim() : 'Nada a declarar';

        tr.innerHTML = `
            <td>${issue.number}</td>
            <td>Não Iniciado</td>
            <td>${squad}</td>
            <td>${modulo}</td>
            <td class="delivery-detail">${detalheEntrega}</td>
            <td><button class="edit-button">Editar</button></td>
        `;

        applyStatusColor(tr, 'Não Iniciado');

        const editButton = tr.querySelector('.edit-button');
        editButton.addEventListener('click', () => toggleEditRow(editButton));

        tableBody.appendChild(tr);
    });

    updateStatusTotals();
}

function applyStatusColor(row, status) {
    row.classList.remove('row-in-progress', 'row-completed', 'row-blocked');
    if (status === 'Em andamento') {
        row.classList.add('row-in-progress');
    } else if (status === 'Finalizado') {
        row.classList.add('row-completed');
    } else if (status === 'Bloqueado') {
        row.classList.add('row-blocked');
    }
}

async function toggleEditRow(button) {
    const row = button.closest('tr');
    const statusCell = row.cells[1];
    const detailCell = row.cells[4];

    if (button.innerText === 'Editar') {
        const statusSelect = document.createElement('select');
        ['Não Iniciado', 'Em andamento', 'Finalizado', 'Bloqueado'].forEach(optionValue => {
            const option = document.createElement('option');
            option.value = optionValue;
            option.text = optionValue;
            if (statusCell.innerText === optionValue) {
                option.selected = true;
            }
            statusSelect.appendChild(option);
        });
        statusCell.innerHTML = '';
        statusCell.appendChild(statusSelect);

        const detailInput = document.createElement('textarea');
        detailInput.value = detailCell.innerText.trim();
        detailCell.innerHTML = '';
        detailCell.appendChild(detailInput);

        button.innerText = 'Salvar';
    } else {
        const statusSelect = statusCell.querySelector('select');
        const detailInput = detailCell.querySelector('textarea');

        statusCell.innerHTML = statusSelect.value;
        detailCell.innerHTML = detailInput.value;

        applyStatusColor(row, statusSelect.value);

        button.innerText = 'Editar';
        updateStatusTotals();

        // Salvar as alterações na issue 6
        await saveToIssue6(row);
    }
}

async function saveToIssue6(row) {
    log('Salvando alterações na issue 6...');
    try {
        const issueResponse = await fetch(`https://api.github.com/repos/${OWNER}/${REPO}/issues/${ISSUE_NUMBER}`, {
            headers: { 'Authorization': `Bearer ${TOKEN}` }
        });
        const issueData = await issueResponse.json();

        let updatedBody;
        if (!issueData.body || issueData.body.trim() === '') {
            // Se o body estiver vazio, salvar a tabela toda
            updatedBody = generateFullTableContent();
        } else {
            // Se não, atualizar apenas a linha específica
            updatedBody = updateTableRow(issueData.body, row);
        }

        const updateResponse = await fetch(`https://api.github.com/repos/${OWNER}/${REPO}/issues/${ISSUE_NUMBER}`, {
            method: 'PATCH',
            headers: {
                'Authorization': `Bearer ${TOKEN}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ body: updatedBody })
        });

        if (updateResponse.ok) {
            log('Alterações salvas com sucesso na issue 6.');
        } else {
            throw new Error('Falha ao salvar alterações na issue 6.');
        }
    } catch (error) {
        log(`Erro ao salvar alterações: ${error.message}`);
    }
}

function generateFullTableContent() {
    let tableContent = "| Número da Squad | Status | Squad (da Issue) | Módulo (da Issue) | Detalhe da Entrega |\n";
    tableContent += "|------------------|--------|-------------------|--------------------|--------------------|";

    const rows = tableBody.querySelectorAll('tr');
    rows.forEach(row => {
        const cells = row.cells;
        tableContent += `\n| ${cells[0].innerText} | ${cells[1].innerText} | ${cells[2].innerText} | ${cells[3].innerText} | ${cells[4].innerText} |`;
    });

    return tableContent;
}

function updateTableRow(existingBody, updatedRow) {
    const lines = existingBody.split('\n');
    const updatedCells = Array.from(updatedRow.cells).map(cell => cell.innerText);

    const updatedRowIndex = lines.findIndex(line => line.includes(`| ${updatedCells[0]} |`));

    if (updatedRowIndex !== -1) {
        lines[updatedRowIndex] = `| ${updatedCells.join(' | ')} |`;
    } else {
        lines.push(`| ${updatedCells.join(' | ')} |`);
    }

    return lines.join('\n');
}

function updateStatusTotals() {
    let totalNaoIniciados = 0;
    let totalEmAndamento = 0;
    let totalFinalizados = 0;

    const rows = tableBody.querySelectorAll('tr');
    rows.forEach(row => {
        const status = row.cells[1].innerText.trim();
        if (status === 'Não Iniciado') {
            totalNaoIniciados++;
        } else if (status === 'Em andamento') {
            totalEmAndamento++;
        } else if (status === 'Finalizado') {
            totalFinalizados++;
        }
    });

    document.getElementById('totalNaoIniciados').innerText = totalNaoIniciados;
    document.getElementById('totalEmAndamento').innerText = totalEmAndamento;
    document.getElementById('totalFinalizados').innerText = totalFinalizados;
}

// Implementação do chat para postmortem
const chatBody = document.getElementById('chatBody');
const chatInput = document.getElementById('chatInput');
const sendButton = document.getElementById('sendButton');

let postmortemState = {
    inProgress: false,
    squad: '',
    bug: '',
    testedInHomolog: ''
};

function addMessageToChat(message, isUser = false) {
    const messageElement = document.createElement('div');
    messageElement.classList.add(isUser ? 'user-message' : 'assistant-message');
    messageElement.textContent = message;
    chatBody.appendChild(messageElement);
    chatBody.scrollTop = chatBody.scrollHeight;
}

function handleChatInput() {
    const userMessage = chatInput.value.trim();
    if (userMessage) {
        addMessageToChat(userMessage, true);
        chatInput.value = '';
        processUserInput(userMessage);
    }
}

sendButton.addEventListener('click', handleChatInput);
chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        handleChatInput();
    }
});

function processUserInput(input) {
    if (!postmortemState.inProgress) {
        if (input.toLowerCase().includes('postmortem')) {
            postmortemState.inProgress = true;
            addMessageToChat("Iniciando o processo de postmortem. Por favor, informe a squad:");
        } else {
            addMessageToChat("Olá! Como posso ajudar? Se quiser iniciar um postmortem, basta mencionar 'postmortem'.");
        }
    } else {
        if (!postmortemState.squad) {
            postmortemState.squad = input;
            addMessageToChat("Obrigado. Agora, descreva o bug encontrado:");
        } else if (!postmortemState.bug) {
            postmortemState.bug = input;
            addMessageToChat("Entendi. O bug foi testado em homologação? (Sim/Não)");
        } else if (!postmortemState.testedInHomolog) {
            postmortemState.testedInHomolog = input.toLowerCase() === 'sim' ? 'Sim' : 'Não';
            addMessageToChat("Obrigado pelas informações. Vou cadastrar esse bug na issue 6.");
            cadastrarBugNaIssue6();
        }
    }
}

async function cadastrarBugNaIssue6() {
    try {
        const issueResponse = await fetch(`https://api.github.com/repos/${OWNER}/${REPO}/issues/${ISSUE_NUMBER}`, {
            headers: { 'Authorization': `Bearer ${TOKEN}` }
        });
        const issueData = await issueResponse.json();

        const bugInfo = `
## Novo Bug Reportado
- Squad: ${postmortemState.squad}
- Descrição do Bug: ${postmortemState.bug}
- Testado em Homologação: ${postmortemState.testedInHomolog}
`;

        const updatedBody = issueData.body ? `${issueData.body}\n\n${bugInfo}` : bugInfo;

        const updateResponse = await fetch(`https://api.github.com/repos/${OWNER}/${REPO}/issues/${ISSUE_NUMBER}`, {
            method: 'PATCH',
            headers: {
                'Authorization': `Bearer ${TOKEN}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ body: updatedBody })
        });

        if (updateResponse.ok) {
            addMessageToChat("Bug cadastrado com sucesso na issue 6.");
        } else {
            throw new Error('Falha ao cadastrar o bug na issue 6.');
        }
    } catch (error) {
        addMessageToChat(`Erro ao cadastrar o bug: ${error.message}`);
    }

    // Resetar o estado do postmortem
    postmortemState = {
        inProgress: false,
        squad: '',
        bug: '',
        testedInHomolog: ''
    };
}

async function main() {
    try {
        await populateTable();
    } catch (error) {
        log(`Erro: ${error.message}`);
    }
}

main();
</script>
</body>
</html>